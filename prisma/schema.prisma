generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
}

model Category {
    id    Int    @id @default(autoincrement())
    name  String @unique
    books Book[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Author {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cartItems CartItem[]

    books Book[] @relation("BookAuthors")
    Book  Book[]
}

model Book {
    id Int @id @default(autoincrement())

    name        String
    imageUrl    String
    price       Int
    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authors Author[] @relation("BookAuthors")

    category   Category   @relation(fields: [categoryId], references: [id])
    categoryId Int
    cartItems  CartItem[]
    Author     Author?    @relation(fields: [authorId], references: [id])
    authorId   Int?
}

model Cart {
    id Int @id @default(autoincrement())

    totalAmount Int @default(0)

    token String

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    book   Book @relation(fields: [bookId], references: [id])
    bookId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    authors Author[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    address  String
    email    String
    phone    String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
